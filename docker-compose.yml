services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: algoarena-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL service (matching your PostgreSQL 17.5)
  postgres:
    image: postgres:17-alpine
    container_name: algoarena-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d  # Optional: SQL init scripts
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migration service
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: algoarena-migrate
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migration  # This makes it only run when explicitly called
    command: npm run migrate:up

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: algoarena-backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app      # Your host backend/ → container /app
      - /app/node_modules   # Keep node_modules in container only
      - ./backend/uploads:/app/uploads  # Mount uploads directory
    environment:
      NODE_ENV: development
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: 7d
      BCRYPT_ROUNDS: 12
      ACCESS_TOKEN_EXPIRY: 15m
      REFRESH_TOKEN_EXPIRY: 7d
      AUTH_RATE_LIMIT_WINDOW_MS: 900000
      AUTH_RATE_LIMIT_MAX_REQUESTS: 5
      GENERAL_RATE_LIMIT_WINDOW_MS: 900000
      GENERAL_RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
      SESSION_SECURE: false
      SESSION_SAME_SITE: strict
      SESSION_MAX_AGE: 604800000
      HELMET_CSP_ENABLED: true
      HELMET_HSTS_ENABLED: true
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: sh -c "npm run build && npm run migrate:up && npm run dev"    # The process keeps this service alive

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: algoarena-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app      # Your host frontend/ → container /app
      - /app/node_modules    # Keep node_modules in container only
      - ./backend/src:/app/backend-src  # Share backend source for types
      - ./backend/dist:/app/backend-dist  # Share backend dist for built types
    environment:
      VITE_BACKEND_BASE_URL: http://localhost:5000/    # Backend URL
      VITE_BACKEND_API_URL: http://localhost:5000/api  # Backend URL
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  redis_data:
  postgres_data: